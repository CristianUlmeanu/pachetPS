#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
print(i)
if (i==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
print(i)
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f,-10000,10000,1)
3/8 * (4*x-2*x^2)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f,-10000,10000,1)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
# f1 <- function(x)(x^2)
# f2 <- function(x) (1 * exp(1)^(-1 * x))
# calcul_medie(f1,f2,0,Inf)
# calcul_dispersie(f1,f2,0,Inf)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
calcul_medie(f1,f2,0,Inf)
calcul_dispersie(f1,f2,0,Inf)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
f1 <- function(x)(exp(1)^(x))
f2 <- function(x)(x^3)
calcul_medie(f1,f2,0,Inf)
calcul_dispersie(f1,f2,0,Inf)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
f1 <- function(x)(exp(1)^(-2*x))
f2 <- function(x)(x^3)
calcul_medie(f1,f2,0,Inf)
calcul_dispersie(f1,f2,0,Inf)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
f1 <- function(x)(exp(1)^(-2*x))
f2 <- function(x)(x^3)
calcul_medie(f2,f1,0,Inf)
calcul_dispersie(f2,f1,0,Inf)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
f1 <- function(x)(2*(x^3))
f2 <- function(x)(exp(1)^(-2*x))
calcul_medie(f1,f2,0,Inf)
calcul_dispersie(f1,f2,0,Inf)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 4){
3/5 * (2*x-6*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f1 <- function(x){
if (x > 0 && x < 4){
3/5 * (2*x-6*x^2)
}else{
0
}
}
f2 <- function(x){
if (x > 0 && x < 4){
3/20*(x^2-2*x)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f1 <- function(x){
if (x > 0 && x < 4){
3/5 * (2*x-6*x^2)
}else{
0
}
}
f2 <- function(x){
if (x > 0 && x < 4){
3/20*(x^2-2*x)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f1,-10000,10000,1)
densitate(f2,-10000,10000,1)
f <- function(x)(dnorm(x,mean=1))
g <- function(x) (dnorm(x,mean=2))
View(f)
# s <- Vectorize(suma_convolutie(f,g))
# d <- Vectorize(diferenta_convolutie(f,g))
#
# plot(f,from=-5,to=6,type="l")
# plot(g,from=-5,to=6,type="l")
# plot(s,from=-5,to=6,type="l")
# plot(d,from=-5,to=6,type="l")
print(f)
plot(f,from=-5,to=6,type="l")
plot(g,from=-5,to=6,type="l")
# plot(s,from=-5,to=6,type="l")
# plot(d,from=-5,to=6,type="l")
print(f(2))
print(f(2))
print(g(2))
print(dnorm(0))
print(dnorm(0))
print(dnorm(1))
print(dnorm(2))
print(dnorm(0,mean = 0))
print(dnorm(1,mean=1))
print(dnorm(1))
print(dnorm(2,mean=2))
print(dnorm(2))
f <- function(x)(dnorm(x))
g <- function(x) (dnorm(x,mean=1))
s <- Vectorize(suma_convolutie(f,g))
d <- Vectorize(diferenta_convolutie(f,g))
##Construirea sumei si diferentei a doua variabile aleatoare continue independente(folositi formula de convolutie)
#Formula de convolutie analogica
#a(n)=Integrala(x(t)*y(n-t))
#Calcularea sumei folosind functia de convolutie Z=X+Y unde X si Y sunt variabile aleatorii => Y=Z-X
suma_convolutie <- function (f,g){function(z){
integrala_con_sum <- function(x){g(z-x)*f(x)}
sum <- integrate(Vectorize(integrala_con_sum),-Inf,Inf) $ value
return(sum)
}}
#Calcularea diferentei folosind functia de convolutie Z=X-Y unde X si Y sunt variabile aleatorii => Y=X-Z
diferenta_convolutie <- function (f,g){function(z){
integrala_con_dif <- function(x){g(x-z)*f(x)}
dif <- integrate(Vectorize(integrala_con_dif),-Inf,Inf) $ value
return(dif)
}}
##Testare
f <- function(x)(dnorm(x))
g <- function(x) (dnorm(x,mean=1))
s <- Vectorize(suma_convolutie(f,g))
d <- Vectorize(diferenta_convolutie(f,g))
#
# plot(f,from=-5,to=6,type="l")
# plot(g,from=-5,to=6,type="l")
# plot(s,from=-5,to=6,type="l")
# plot(d,from=-5,to=6,type="l")
##Construirea sumei si diferentei a doua variabile aleatoare continue independente(folositi formula de convolutie)
#Formula de convolutie analogica
#a(n)=Integrala(x(t)*y(n-t))
#Calcularea sumei folosind functia de convolutie Z=X+Y unde X si Y sunt variabile aleatorii => Y=Z-X
suma_convolutie <- function (f,g){function(z){
integrala_con_sum <- function(x){g(z-x)*f(x)}
sum <- integrate(Vectorize(integrala_con_sum),-Inf,Inf) $ value
return(sum)
}}
#Calcularea diferentei folosind functia de convolutie Z=X-Y unde X si Y sunt variabile aleatorii => Y=X-Z
diferenta_convolutie <- function (f,g){function(z){
integrala_con_dif <- function(x){g(x-z)*f(x)}
dif <- integrate(Vectorize(integrala_con_dif),-Inf,Inf) $ value
return(dif)
}}
##Testare
f <- function(x)(dnorm(x))
g <- function(x) (dnorm(x,mean=1))
s <- Vectorize(suma_convolutie(f,g))
d <- Vectorize(diferenta_convolutie(f,g))
#
plot(f,from=-5,to=6,type="l")
plot(g,from=-5,to=6,type="l")
plot(s,from=-5,to=6,type="l")
plot(d,from=-5,to=6,type="l")
