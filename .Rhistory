return(TRUE)
}
else{
print("Functia nu este densitate de probabilitate.")
return(FALSE)
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
return(FALSE)
}
}
densitate(f2,-10000,10000,10)
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
integrate(Vectorize(f),-Inf,Inf)
test <- integrate(Vectorize(f),-Inf,Inf)
test <- integrate(Vectorize(f2),-Inf,Inf)
f2 <- function(x){
if(x > 0 && x < pi){
exp(1)^(x^2)}
else{
0
}
}
test <- integrate(Vectorize(f2),-Inf,Inf)
test <- integrate(Vectorize(f2),pi/3,pi/2)
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
if(all(f(val)>=0)=='TRUE'){
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1 && all(f(val)>=0)){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
if(all(f(val)>=0)=='TRUE'){
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1 && all(f(val)>=0)){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),pi/3,pi/2)
densitate(f,-10000,10000,10)
densitate(f,-Inf,Inf,1000)
densitate(f,-10000000,Inf,1000)
.Machine$double.xmin
.Machine$double.xmax
densitate(f,2.225074e-308,1.797693e+308,1000)
densitate(f,2.225074e-100,1.797693e+100,1000)
densitate(f,2.225074e-50,1.797693e+50,1000)
densitate(f,2.225074e-30,1.797693e+50,1000)
densitate(f,2.225074e-10,1.797693e+50,1000)
densitate(f,2.225074e-5,1.797693e+50,1000)
densitate(f,-10000,1.797693e+50,1000)
densitate(f,-10000,10000,10)
densitate(f,-100000,10000,10)
densitate(f,-1000000,10000,10)
densitate(f,-10000000,10000,10)
densitate(f,-100000000,10000,10)
densitate(f,-1000000000,1000000,10)
densitate(f,-1000000000,100000000,10)
densitate(f,-10000000000000,100000000,10)
densitate(f,-1000000000000,100000000,10)
densitate(f,-100000000000,100000000,10)
densitate(f,-10000000000,100000000,10)
densitate(f,-20000000000,10000000000,10)
densitate(f,-50000000000,10000000000,10)
densitate(f,-90000000000,10000000000,10)
return(FALSE)
densitate(f,-10000000000,10000000000,10)
densitate(f,-100000000000,10000000000,10)
densitate(f,-10000000000,10000000000,100)
densitate(f,-90000000000,10000000000,100)
densitate(f,-90000000000,10000000000,100)
densitate(f,-1000,1000,10)
val <- seq(lower,upper,pas);
val <- seq(-1000,1000,100)
densitate(f,-800000000,800000000,10)
densitate(f,-8000000000,8000000000,100)
densitate(f,-80000000000,80000000000,100)
densitate(f,-80000000000,80000000000,100)
densitate(f,-80000000000,80000000000,10)
densitate(f,-80000000000,80000000000,1000)
densitate(f,-80000000000,80000000000,100)
densitate(f,-50000000000,50000000000,100)
densitate(f,10000000000000,10000000000000,10000000)
densitate(f,1000000000000000,1000000000000000,10000000)
densitate(f,10000000000000000,10000000000000000,10000000)
densitate(f,1000000000000000000,1000000000000000000,10000000)
densitate(f,100000000000000000000,100000000000000000000,10000000)
densitate(f,100000000000000000000000,100000000000000000000000,10000000)
densitate(f,10000000000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-10000000000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-1000000000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-100000000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-10000000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-1000000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-100000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-10000000000000000000000,1000000000000000000000000000,10000000)
return(FALSE)
densitate(f,-1000000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-100000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-10000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-1000000000000000000,1000000000000000000000000000,10000000)
densitate(f,-100000000000000000,1000000000000000000000000000,10000000)
densitate(f,-1000000000000000,1000000000000000000000000000,10000000)
densitate(f,-10000000000000,1000000000000000000000000000,10000000)
densitate(f,-100000000000,1000000000000000000000000000,10000000)
densitate(f,-1000000000,1000000000000000000000000000,10000000)
densitate(f,-10000000,1000000000000000000000000000,10000000)
densitate(f,-1000000,1000000000000000000000000000,10000000)
densitate(f,-100000,1000000000000000000000000000,10000000)
densitate(f,-100000000000000000000000000,100000000000000000000000000,10000000)
densitate(f,-10000000000000000000000000,10000000000000000000000000,10000000)
densitate(f,-1000000000000000000000000,1000000000000000000000000,10000000)
densitate(f,-100000000000000000000000,100000000000000000000000,10000000)
densitate(f,-10000000000000000000000,10000000000000000000000,100000)
densitate(f,-1000000000000000000000,1000000000000000000000,100000)
densitate(f,-100000000000000000000,100000000000000000000,100000)
densitate(f,-10000000000000000000,10000000000000000000,100000)
densitate(f,-1000000000000000000,1000000000000000000,100000)
densitate(f,-100000000000000000,100000000000000000,100000)
densitate(f,-10000000000000000,10000000000000000,100000)
densitate(f,-1000000000000000,1000000000000000,100000)
densitate(f,-100000000000000,100000000000000,100000)
densitate(f,-100000000000000,100000000000000,1000000)
densitate(f,-100000000000000,100000000000000,100000)
densitate(f,-1000000000000000,1000000000000000,100000)
densitate(f,-1000000000000000,1000000000000000,100000)
densitate(f,-100000000000000,100000000000000,100000)
densitate(f,-100000000000000,100000000000000,10000)
densitate(f,-10000000000000,10000000000000,10000)
densitate(f,-10000000000000,10000000000000,1000)
densitate(f,-1000000000000,1000000000000,1000)
densitate(f,-1000000000000,1000000000000,100)
densitate(f,-100000000000,100000000000,100)
densitate(f,-100000000000,100000000000,10)
densitate(f,-10000000000,10000000000,10)
densitate(f,-1000000000,1000000000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1 && all(f(val)>=0)){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),pi/3,pi/2)
densitate(f,-1000000000,1000000000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1 && all(f(val)>=0)){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),pi/3,pi/2)
densitate(f,-10000,10000,1)
test <- integrate(Vectorize(f),-Inf,Inf)
View(test)
View(test)
print(t)
print(test)
test <- integrate(Vectorize(f),-Inf,Inf)
print(test)
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (i==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
print(i)
if (i==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
print(i)
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(round(test))
densitate(f,-10000,10000,1)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f,-10000,10000,1)
3/8 * (4*x-2*x^2)
## Verificarea daca o functie introdusa de utilizator este densitate de probabilitate.
densitate <- function(f,lower,upper,pas){
val <- seq(lower,upper,pas);
#Verificare functie pozitiva
if(all(f(val)>=0)=='TRUE'){
#Verificare integrabilitate
if(typeof(integrate(Vectorize(f),-Inf,Inf))=='logical' && integrate(Vectorize(f),-Inf,Inf)==FALSE || integrate(Vectorize(f),-Inf,Inf) $ message!="OK"){
return(FALSE)
}
else{
i = integrate(Vectorize(f),-Inf,Inf) $ value
if (round(i)==1){
print("Functia este densitate de probabilitate.")
}
else{
print("Functia nu este densitate de probabilitate.")
}
}
}
else{
print("Functia este negativa pe intervalul ales.")
}
}
##TESTARE
f <- function(x){
if (x > 0 && x < 2){
3/8 * (4*x-2*x^2)
}else{
0
}
}
test <- integrate(Vectorize(f),-Inf,Inf) $ value
print(test)
densitate(f,-10000,10000,1)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
# f1 <- function(x)(x^2)
# f2 <- function(x) (1 * exp(1)^(-1 * x))
# calcul_medie(f1,f2,0,Inf)
# calcul_dispersie(f1,f2,0,Inf)
##Calculul mediei si dispersiei unei variabile aleatoare g(X), unde X are o repartitie continua cunoscuta iar g este o functie continua precizata de utilizator.
#Verificare functie de repartitie
#x1<x2=>f(x1)<f(x2)
#f(x-0)=f(x)
#lim f(x)=0 cand x - > -Inf
#lim f(x)=1 cand x - > Inf
#Calculare medie
calcul_medie<- function(g,functie_dens_prob,lower,upper){
integrala_medie <- function(x){g(x)*functie_dens_prob(x)}
medie <- integrate(Vectorize(integrala_medie),lower,upper) $ value
return(medie)
}
#Calculare dispersie
calcul_dispersie <- function(g,functie_dens_prob,lower,upper){
integrala_dispersie <- function(x){(g(x)-calcul_medie(g,functie_dens_prob,lower,upper))^2*functie_dens_prob(x)}
dispersie <- integrate(Vectorize(integrala_dispersie),lower,upper) $ value
return(dispersie)
}
#Testare
#
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
calcul_medie(f1,f2,0,Inf)
calcul_dispersie(f1,f2,0,Inf)
